import fs from "fs";
import path from "path";
import { parse, printSchema } from "graphql";
import { codegen } from "@graphql-codegen/core";
import { plugin as typescriptPlugin } from "@graphql-codegen/typescript";
import { plugin as typescriptOperationsPlugin } from "@graphql-codegen/typescript-operations";

export const generate = async (pathName, schema) => {
  await fs.writeFileSync(
    path.resolve(__dirname + "/../src/schema.gql"),
    printSchema(schema)
  );
  const querySchema = await fs
    .readFileSync(path.resolve(__dirname + "/../src/query.gql"))
    .toString();

  try {
    const res = await codegen({
      filename: path.resolve(__dirname + "/../src/schema.ts"),
      schema: parse(printSchema(schema)),
      documents: [
        {
          location: "operation.graphql",
          document: parse(querySchema),
        },
      ],
      config: {},
      plugins: [{ typescript: {} }, { typescriptOperations: {} }],
      pluginMap: {
        typescript: {
          plugin: typescriptPlugin,
        },
        typescriptOperations: {
          plugin: typescriptOperationsPlugin,
        },
      },
    });
    await fs.writeFileSync(
      path.resolve(process.cwd() + "/.forestry/types.ts"),
      `// DO NOT MODIFY THIS FILE. This file is automatically generated by Forestry
    ${res}
        `
    );
  } catch (e) {
    console.error(e);
  }

  const query = await fs.readFileSync(__dirname + "/../src/query.gql");
  await fs.writeFileSync(
    path.resolve(process.cwd() + "/.forestry/query.ts"),
    `// DO NOT MODIFY THIS FILE. This file is automatically generated by Forestry
export default \`${query}\`
`
  );
};
