import { parse, printSchema, GraphQLSchema, BREAK } from "graphql";
import { codegen } from "@graphql-codegen/core";
import { plugin as typescriptPlugin } from "@graphql-codegen/typescript";
import { plugin as typescriptOperationsPlugin } from "@graphql-codegen/typescript-operations";
import { queryBuilder } from "./queryBuilder";

export const generateTypes = async ({ schema }: { schema: GraphQLSchema }) => {
  try {
    const res = await codegen({
      filename:
        "/Users/jeffsee/code/scratch/graphql-demo/apps/demo/.forestry/autoschema.gql",
      schema: parse(printSchema(schema)),
      documents: [],
      config: {},
      plugins: [
        // { forestryOperations: {} },
        { typescript: {} },
        { typescriptOperations: {} },
      ],
      pluginMap: {
        // NOTE: we may not need to generate types for the query since
        // it's auto-generated by us
        // forestryOperations: {
        //   plugin: (schema, documents, config) => {
        //     documents.push({
        //       document: queryBuilder(schema),
        //     });
        //     return undefined;
        //   },
        // },
        typescript: {
          plugin: typescriptPlugin,
        },
        typescriptOperations: {
          plugin: typescriptOperationsPlugin,
        },
      },
    });
    return { typescriptTypes: res, query: queryBuilder(schema) };
  } catch (e) {
    console.error(e);
  }
};
