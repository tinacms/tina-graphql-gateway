type Query {
  document(path: String): DocumentUnion
}

union DocumentUnion = Post | Author

type Post {
  path: String
  form: PostForm
  data: PostData
  initialValues: PostInitialValues
}

type PostForm {
  label: String
  fields: [PostFormFields]
}

union PostFormFields = TextareaField | SelectField | PostSectionsBlocksField

type TextareaField {
  name: String
  label: String
  component: String
  description: String
}

type SelectField {
  name: String
  label: String
  component: String
  options: [String]
}

type PostSectionsBlocksField {
  name: String
  label: String
  component: String
  templates: PostSectionsBlocksFieldTemplates
}

type PostSectionsBlocksFieldTemplates {
  section: SectionForm
}

type SectionForm {
  label: String
  fields: [SectionFormFields]
}

union SectionFormFields = TextareaField | SectionCtaGroupField | ListField

type SectionCtaGroupField {
  name: String
  label: String
  component: String
  fields: [SectionCtaFormFields]
}

union SectionCtaFormFields = TextareaField

type ListField {
  name: String
  label: String
  component: String
  defaultItem: String
  field: ListFormFieldItemField
}

union ListFormFieldItemField = SelectField | TextField

type TextField {
  component: String
}

type PostData {
  title: String
  author: AuthorDocument
  sections: [sectionDataUnion]
}

type AuthorDocument {
  document: authorsDocumentUnion
}

union authorsDocumentUnion = Author

type Author {
  path: String
  form: AuthorForm
  data: AuthorData
  initialValues: AuthorInitialValues
}

type AuthorForm {
  label: String
  fields: [AuthorFormFields]
}

union AuthorFormFields = TextareaField | SelectField | ListField | AuthorAccoladesGroupListField

type AuthorAccoladesGroupListField {
  name: String
  label: String
  component: String
  fields: [AuthorAccoladesFormFields]
}

union AuthorAccoladesFormFields = TextareaField

type AuthorData {
  name: String
  role: String
  anecdotes: [String]
  accolades: [AccoladesData]
}

type AccoladesData {
  figure: String
  description: String
}

type AuthorInitialValues {
  name: String
  role: String
  anecdotes: [String]
  accolades: [AccoladesData]
}

union sectionDataUnion = SectionData

type SectionData {
  description: String
  cta: CtaData
  authors: AuthorsDocuments
  template: String
}

type CtaData {
  header: String
}

type AuthorsDocuments {
  documents: [authorsDocumentUnion]
}

type PostInitialValues {
  title: String
  author: String
  sections: [sectionInitialValuesUnion]
}

union sectionInitialValuesUnion = SectionInitialValues

type SectionInitialValues {
  description: String
  authors: [String]
  cta: CtaInitialValues
  _template: String
}

type CtaInitialValues {
  header: String
}

type Mutation {
  updateDocument(path: String!, params: DocumentInput): DocumentUnion
}

input DocumentInput {
  PostInput: PostInput
  AuthorInput: AuthorInput
}

input PostInput {
  content: String
  data: PostInputData
}

input PostInputData {
  title: String
  author: String
  sections: [PostSectionsBlocksInput]
}

input PostSectionsBlocksInput {
  SectionInputData: SectionInputData
}

input SectionInputData {
  description: String
  authors: [String]
  cta: CtaInputData!
  template: String
}

input CtaInputData {
  header: String
}

input AuthorInput {
  content: String
  data: AuthorInputData
}

input AuthorInputData {
  name: String
  role: String
  anecdotes: [String]
  accolades: [AccoladesInputData]
}

input AccoladesInputData {
  figure: String
  description: String
}
