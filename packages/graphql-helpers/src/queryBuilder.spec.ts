/**
Copyright 2021 Forestry.io Inc
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { splitDataNode } from "./queryBuilder";
// import * as fixtures from "./__fixtures__/splitDataNode";
import { parse, buildASTSchema, buildSchema } from "graphql";

describe("splitDataNode", () => {
  test("it should include fragments and nested fragments", () => {
    const splitNodes = splitDataNode({
      queryString: query,
      schema: buildSchema(schema),
    });

    expect(splitNodes.queries["getPostsDocument"].fragments).toEqual(
      expect.arrayContaining(["PostFragment", "PostDetailsFragment"])
    );
  });
});

const query = `
fragment PostDetailsFragment on Post_Details_Data {
  reading_time
}

fragment PostFragment on Post_Doc_Data {
  title
  details {
    ...PostDetailsFragment
  }
}

query PostQuery {
  getPostsDocument(relativePath: "welcome.md") {
    data {
      __typename
      ...PostFragment
    }
  }
}
`;

const schema = `# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
interface Node {
  id: ID!
}

interface Document {
  sys: SystemInfo
  id: ID!
}

interface FormField {
  label: String
  name: String
  component: String
}

"""
References another document, used as a foreign key
"""
scalar Reference

"""

"""
scalar JSON

"""

"""
scalar JSONObject

type SystemInfo {
  filename: String
  basename: String
  breadcrumbs(excludeExtension: Boolean): [String]
  path: String
  relativePath: String
  extension: String
  template: String
  section: Section
}

type Section {
  type: String
  path: String
  label: String
  create: String
  match: String
  new_doc_ext: String
  templates: [String]
  slug: String
  documents: [Document]
}

union SectionDocumentUnion = Posts_Document

input SectionParams {
  posts: Posts_Input
}

type Mutation {
  addPendingDocument(
    relativePath: String
    section: String
    template: String
  ): Document
  updateDocument(
    relativePath: String
    params: SectionParams
  ): SectionDocumentUnion
  updatePostsDocument(relativePath: String, params: Posts_Input): Posts_Document
}

type Query {
  _queryString: String
  node(id: ID!): Node
  getDocument(section: String, relativePath: String): SectionDocumentUnion
  getSections: [Section]
  getSection(section: String): Section
  getPostsDocument(relativePath: String): Posts_Document
  getPostsList: [Posts_Document]
}

union Posts_Data = Post_Doc_Data

input Posts_Input {
  post: Post_Doc_Input
}

union Posts_Values = Post_Doc_Values

union Posts_Form = Post_Doc_Form

type Posts_Document implements Node & Document {
  id: ID!
  sys: SystemInfo
  data: Posts_Data
  values: Posts_Values
  form: Posts_Form
}

type Post_Details_Data {
  reading_time: String
}

type LongTextValue {
  raw: String
  markdownAst: JSONObject
  html: String
}

type Post_Doc_Data {
  title: String
  details: Post_Details_Data
  _body: LongTextValue
}

type Post_Details_Values {
  reading_time: String
}

type LongTextInitialValue {
  raw: String
}

type Post_Doc_Values {
  title: String
  details: Post_Details_Values
  _body: LongTextInitialValue
  _template: String
}

type TextField implements FormField {
  name: String
  label: String
  component: String
}

union Post_Details_FormFieldsUnion = TextField

type Post_Details_GroupField implements FormField {
  name: String
  label: String
  component: String
  fields: [Post_Details_FormFieldsUnion]
}

type TextareaField implements FormField {
  name: String
  label: String
  component: String
}

union Post_Doc_FormFieldsUnion =
    TextField
  | Post_Details_GroupField
  | TextareaField

type Post_Doc_Form {
  label: String
  name: String
  fields: [Post_Doc_FormFieldsUnion]
}

input Post_Details_Input {
  reading_time: String
}

input Body_LongTextInput {
  raw: String
}

input Post_Doc_Input {
  title: String
  details: Post_Details_Input
  _body: Body_LongTextInput
}
`;
